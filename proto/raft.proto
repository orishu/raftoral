syntax = "proto3";

package raftoral;

// Generic message envelope for any Message<Command> type
message GenericMessage {
    bytes serialized_message = 1;  // JSON-serialized Message<Command>
}

// gRPC service for Raft communication
service RaftService {
    // Send any generic Message<Command> to a peer node
    rpc SendMessage(GenericMessage) returns (MessageResponse);

    // Discover node information (for bootstrap)
    rpc Discover(DiscoveryRequest) returns (DiscoveryResponse);
}

message MessageResponse {
    bool success = 1;
    string error = 2;
}

message DiscoveryRequest {
    // Empty for now, could include requester info in the future
}

enum RaftRole {
    FOLLOWER = 0;
    CANDIDATE = 1;
    LEADER = 2;
    LEARNER = 3;
}

message DiscoveryResponse {
    uint64 node_id = 1;
    RaftRole role = 2;
    uint64 highest_known_node_id = 3;
    string address = 4;
}
