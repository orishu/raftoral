syntax = "proto3";

package raftoral;

// Generic message envelope for any Message<Command> type
message GenericMessage {
    bytes serialized_message = 1;  // JSON-serialized Message<Command>
}

// gRPC service for Raft communication
service RaftService {
    // Send any generic Message<Command> to a peer node
    rpc SendMessage(GenericMessage) returns (MessageResponse);

    // Discover node information (for bootstrap)
    rpc Discover(DiscoveryRequest) returns (DiscoveryResponse);
}

message MessageResponse {
    bool success = 1;
    string error = 2;
}

message DiscoveryRequest {
    // Empty for now, could include requester info in the future
}

enum RaftRole {
    FOLLOWER = 0;
    CANDIDATE = 1;
    LEADER = 2;
    LEARNER = 3;
}

message DiscoveryResponse {
    uint64 node_id = 1;
    RaftRole role = 2;
    uint64 highest_known_node_id = 3;
    string address = 4;
    repeated uint64 voters = 5;      // Current voting members
    repeated uint64 learners = 6;    // Current learner members
    uint64 first_entry_index = 7;    // Index of first log entry (usually 1)
    uint64 first_entry_term = 8;     // Term of first log entry for bootstrapping
}

// Workflow Management Service
service WorkflowManagement {
    // Synchronously run a workflow and wait for result
    rpc RunWorkflowSync(RunWorkflowRequest) returns (RunWorkflowResponse);
}

message RunWorkflowRequest {
    string workflow_type = 1;
    uint32 version = 2;
    string input_json = 3;  // JSON-serialized input
}

message RunWorkflowResponse {
    bool success = 1;
    string result_json = 2;  // JSON-serialized result if success=true
    string error = 3;        // Error message if success=false
}
