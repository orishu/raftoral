syntax = "proto3";

package raftoral;

// Generic message envelope for any Message<Command> type
// Now uses protobuf for message structure, JSON only for command payload
message GenericMessage {
    uint64 cluster_id = 7;  // 0 = management cluster, other = execution cluster ID
    oneof message {
        ProposeMessage propose = 1;
        bytes raft_message = 2;          // Protobuf-serialized raft::prelude::Message
        ConfChangeV2Message conf_change = 3;
        CampaignMessage campaign = 4;
        AddNodeMessage add_node = 5;
        RemoveNodeMessage remove_node = 6;
    }
}

message ProposeMessage {
    bytes command_json = 1;  // JSON-serialized command
    uint64 sync_id = 2;      // For synchronous proposal tracking (0 = async)
}

message ConfChangeV2Message {
    uint32 id = 1;
    bytes change_bytes = 2;  // Protobuf-serialized raft::prelude::ConfChangeV2
    // DEPRECATED: Use AddNode/RemoveNode messages instead
}

message CampaignMessage {
    // Empty message
}

message AddNodeMessage {
    uint64 node_id = 1;
    string address = 2;
    uint64 sync_id = 3;      // For synchronous tracking (0 = async)
}

message RemoveNodeMessage {
    uint64 node_id = 1;
    uint64 sync_id = 2;      // For synchronous tracking (0 = async)
}

// gRPC service for Raft communication
service RaftService {
    // Send any generic Message<Command> to a peer node
    rpc SendMessage(GenericMessage) returns (MessageResponse);

    // Discover node information (for bootstrap)
    rpc Discover(DiscoveryRequest) returns (DiscoveryResponse);
}

message MessageResponse {
    bool success = 1;
    string error = 2;
}

message DiscoveryRequest {
    // Empty for now, could include requester info in the future
}

enum RaftRole {
    FOLLOWER = 0;
    CANDIDATE = 1;
    LEADER = 2;
    LEARNER = 3;
}

message DiscoveryResponse {
    uint64 node_id = 1;
    RaftRole role = 2;
    uint64 highest_known_node_id = 3;
    string address = 4;
    repeated uint64 voters = 5;      // Current voting members
    repeated uint64 learners = 6;    // Current learner members
}

// Workflow Management Service
service WorkflowManagement {
    // Synchronously run a workflow and wait for result
    rpc RunWorkflowSync(RunWorkflowRequest) returns (RunWorkflowResponse);
}

message RunWorkflowRequest {
    string workflow_type = 1;
    uint32 version = 2;
    string input_json = 3;  // JSON-serialized input
}

message RunWorkflowResponse {
    bool success = 1;
    string result_json = 2;  // JSON-serialized result if success=true
    string error = 3;        // Error message if success=false
}
